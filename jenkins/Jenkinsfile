
pipeline {
    agent any
    /*triggers {
         pollSCM ('* * * * *')       
    }*/
    parameters {							
        
	    string(name: 'Branch/Repo', defaultValue: '', description: 'Specify the branch name')
		booleanParam(name: 'Build Type = Application', defaultValue: false, description: '')
        booleanParam(name: 'Build Type = DB', defaultValue: false, description: '')
        booleanParam(name: 'Build Type = Lambda', defaultValue: false, description: '')
        string(name: 'Deploy Build Number', defaultValue: '', description: 'Specify the build number to be deployed')
		    choice(choices: 'NA=Build only\nDev\nTest\nStage\nProd', description: 'specify the environment name', name: 'environment')		
    }
    stages {
        stage('checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/kvelskrishnan/simple-java-maven-app.git']]])
            }
        }
        
        stage('Build') {
            steps {
             sh 'mvn -B -DskipTests clean package'   
            }
            
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        /*stage('Sonarqube') {
            steps {
             sh 'Publish results to sonarqube'   
            }
            
        }*/
        stage('Deploy') {
          steps {
            script {
              if (params.environment == "Test" || params.environment == "Stage" || params.environment == "Prod") {
                input "Deploy to environment"
              }
              else {
                echo "Deploying"
              }
            }
          }
        }
        /*test_run*/
        //https://issues.jenkins-ci.org/browse/JENKINS-27295

//DEPLOY_SQL=DEPLOY_SQL=="false/fasle"

//DEPLOY_LAMBDA=DEPLOY_LAMBDA=="true/false"

//DEPLOY_App=”false/true”

 

/*def CONTROLLED_ENVIRONMENTS = ['prod','stage’,'test']*/

 

//Approval gate

/*stage('Deploy approval'){
  if (CONTROLLED_ENVIRONMENTS.contains(ENVIRONMENT)){
        emailext attachLog: false,
                       body: "Deployment ${JOB_BASE_NAME} requires approval for the ${ENVIRONMENT} environment. ${BUILD_URL}input",
                       replyTo: 'techops@lifescan.com',
                       subject: "Approval required for ${ENVIRONMENT} environment in ${JOB_BASE_NAME}",
                       to: APPROVER_LIST
        def feedback = input submitter: APPROVER_LIST, message: "This will deploy to the controlled environment $ENVIRONMENT"
  } else{
               echo "Deployment to ${ENVIRONMENT} does not require approval."
  }
}*/

 
        stage('Results') {

      steps {

        script {

          LINK=GIT_URL.split(".git\$")[0]

          //emailext mimeType: 'text/html', attachLog: true, body: "Build ${BUILD_NUMBER} for branch ${GIT_BRANCH} completed successfully. \nCommit: ${LINK}/commit/${GIT_COMMIT}", compressLog: false, recipientProviders: [requestor()], replyTo: biswajit.ghosh2@cognizant.com , subject: '${BUILD_TAG}', to: biswajit.ghosh2@cognizant.com

}

      }

    }
        /*stage('Deploy') {
            steps {
                sh """ scp -r target/my-app-1.0-SNAPSHOT.jar 18.236.137.164@ec2-user:/var/lib """
                
            }
        }*/
    }
}
